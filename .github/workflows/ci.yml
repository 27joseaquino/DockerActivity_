name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: "Build and Push"
    runs-on: ${{ matrix.os }}
    outputs:
      docker_tag: ${{ steps.generate_tag.outputs.sha }}

    strategy:
      matrix:
        node-version: [22]
        os: [ubuntu-latest]

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Instalar dependências
        run: npm install

      # - name: Rodar os testes
      #   run: npm test
      - name: Generate Tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Login into the Container Registriy
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: docker build -t m4theus4quino/shortlink:${{ steps.generate_tag.outputs.sha }} .

      - name: Push Docker Image to DockerHub
        run: docker push m4theus4quino/shortlink:${{ steps.generate_tag.outputs.sha }}

  deploy:
    name: Deploy on Digital Ocean
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Copy docker-compose file via ssh
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          source: "docker-compose.yml"
          target: "~/"

      - name: Deploy on Digital Ocean via ssh
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          script: |
            # Extract the tag on job build
              TAG=${{ needs.build.outputs.docker_tag }}
              # Create env file
              [ -e .env ] && rm .env
              touch .env
              echo  "DOCKER_IMAGE_TAG=$TAG" > .env
              # Login Docker
